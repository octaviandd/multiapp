// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]
  tasks     Task[] @relation("TaskAssignee")
  createdTasks Task[] @relation("TaskCreator")
  subtasks  SubTask[]
  comments  Comment[]
  taskLikes TaskLike[]
  transactions Transaction[]
}

model Board {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  displayOrder Int 
  tasks     Task[]
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  displayOrder Int
}

model File {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskFiles TaskFile[]
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String
  body      String?
  assignee  User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId Int?
  dueDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  displayOrder Int
  completed Boolean @default(false)
  subtasks  SubTask[]
  comments  Comment[]
  files     TaskFile[]
  boardId   Int
  parentBoard Board @relation(fields: [boardId], references: [id])
  taskLikes TaskLike[]
  createdBy User @relation("TaskCreator", fields: [createdById], references: [id])
  createdById Int
}

model TaskFile {
  id        Int      @id @default(autoincrement())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  file      File     @relation(fields: [fileId], references: [id])
  fileId    Int
}

model TaskLike {
  id        Int      @id @default(autoincrement())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model SubTask {
  id        Int      @id @default(autoincrement())
  title     String
  body      String?
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  assignee  User     @relation(fields: [assigneeId], references: [id])
  assigneeId Int
  dueDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  displayOrder Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}