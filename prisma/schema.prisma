// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  board     TasksBoard   @relation(fields: [boardId], references: [id])
  boardId   Int
  asignee   User  @relation(fields: [asigneeId], references: [id])
  asigneeId Int
  due_date  DateTime
  sub_tasks SubTask[]
  comments Comment[]
}
model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  task      Task   @relation(fields: [taskId], references: [id])
  taskId    Int
  author    User   @relation(fields: [authorId], references: [id])
  authorId  Int
}
model SubTask {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  task      Task   @relation(fields: [taskId], references: [id])
  taskId    Int
  asignee   User  @relation(fields: [asigneeId], references: [id])
  asigneeId Int
  due_date  DateTime
}

model Goals {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

model TasksBoard {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int @unique
  notes    Task[]
}

model Note {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  password String
  name    String?
  profile Profile?
  notes Note[]
  goas Goals[]
  task_boards TasksBoard[]
  tasks Task[]
  sub_tasks SubTask[]
  comments Comment[]
}