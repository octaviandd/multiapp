// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum LikableType {
  Task
  Comment
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  password     String
  email        String        @unique
  role         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  notes        Note[]
  tasks        Task[]        @relation("TaskAssignee")
  createdTasks Task[]        @relation("TaskCreator")
  subtasks     SubTask[]
  comments     Comment[]
  taskLikes    TaskLike[]
  commentLikes CommentLike[]
  transactions Transaction[]
}

model Board {
  id           Int      @id @default(autoincrement())
  temporaryId  String
  title        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  displayOrder Int
  tasks        Task[]   @relation(name: "BoardToTasks")
}

model Note {
  id           Int      @id @default(autoincrement())
  title        String
  body         String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  displayOrder Int
}

model File {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  taskFiles TaskFile[]
}

model Task {
  id           Int        @id @default(autoincrement())
  temporaryId  String
  title        String
  body         String?
  assignee     User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId   Int?
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  displayOrder Int
  completed    Boolean    @default(false)
  subtasks     SubTask[]
  comments     Comment[]
  files        TaskFile[]
  boardId      Int
  parentBoard  Board      @relation(name: "BoardToTasks", fields: [boardId], references: [id], onDelete: Cascade)
  taskLikes    TaskLike[]
  createdBy    User       @relation("TaskCreator", fields: [createdById], references: [id])
  createdById  Int
}

model TaskFile {
  id     Int  @id @default(autoincrement())
  task   Task @relation(fields: [taskId], references: [id])
  taskId Int
  file   File @relation(fields: [fileId], references: [id])
  fileId Int
}

model TaskLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubTask {
  id           Int      @id @default(autoincrement())
  title        String
  body         String?
  task         Task     @relation(fields: [taskId], references: [id])
  taskId       Int
  assignee     User     @relation(fields: [assigneeId], references: [id])
  assigneeId   Int
  dueDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  displayOrder Int
}

model Comment {
  id           Int           @id @default(autoincrement())
  content      String
  task         Task          @relation(fields: [taskId], references: [id])
  taskId       Int
  author       User          @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  commentLikes CommentLike[]
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
